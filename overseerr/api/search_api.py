# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union

from overseerr.models.get_discover_movies200_response import GetDiscoverMovies200Response
from overseerr.models.get_discover_movies_genre_by_genre_id200_response import GetDiscoverMoviesGenreByGenreId200Response
from overseerr.models.get_discover_movies_language_by_language200_response import GetDiscoverMoviesLanguageByLanguage200Response
from overseerr.models.get_discover_movies_studio_by_studio_id200_response import GetDiscoverMoviesStudioByStudioId200Response
from overseerr.models.get_discover_tv200_response import GetDiscoverTv200Response
from overseerr.models.get_discover_tv_genre_by_genre_id200_response import GetDiscoverTvGenreByGenreId200Response
from overseerr.models.get_discover_tv_language_by_language200_response import GetDiscoverTvLanguageByLanguage200Response
from overseerr.models.get_discover_tv_network_by_network_id200_response import GetDiscoverTvNetworkByNetworkId200Response
from overseerr.models.get_search200_response import GetSearch200Response
from overseerr.models.get_search_company200_response import GetSearchCompany200Response
from overseerr.models.get_search_keyword200_response import GetSearchKeyword200Response
from overseerr.models.get_user_watchlist200_response import GetUserWatchlist200Response
from overseerr.models.list_discover_genreslider_movie200_response_inner import ListDiscoverGenresliderMovie200ResponseInner

from overseerr.api_client import ApiClient
from overseerr.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SearchApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_discover_keyword_movies(self, keyword_id : Union[StrictFloat, StrictInt], page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> GetDiscoverMovies200Response:  # noqa: E501
        """Get movies from keyword  # noqa: E501

        Returns list of movies based on the provided keyword ID a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_keyword_movies(keyword_id, page, language, async_req=True)
        >>> result = thread.get()

        :param keyword_id: (required)
        :type keyword_id: float
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDiscoverMovies200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_keyword_movies_with_http_info(keyword_id, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_keyword_movies_with_http_info(self, keyword_id : Union[StrictFloat, StrictInt], page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Get movies from keyword  # noqa: E501

        Returns list of movies based on the provided keyword ID a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_keyword_movies_with_http_info(keyword_id, page, language, async_req=True)
        >>> result = thread.get()

        :param keyword_id: (required)
        :type keyword_id: float
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDiscoverMovies200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'keyword_id',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_keyword_movies" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['keyword_id']:
            _path_params['keywordId'] = _params['keyword_id']

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetDiscoverMovies200Response",
        }

        return self.api_client.call_api(
            '/discover/keyword/{keywordId}/movies', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_movies(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, genre : Optional[StrictStr] = None, studio : Optional[Union[StrictFloat, StrictInt]] = None, keywords : Optional[StrictStr] = None, sort_by : Optional[StrictStr] = None, primary_release_date_gte : Optional[StrictStr] = None, primary_release_date_lte : Optional[StrictStr] = None, with_runtime_gte : Optional[Union[StrictFloat, StrictInt]] = None, with_runtime_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_lte : Optional[Union[StrictFloat, StrictInt]] = None, watch_region : Optional[StrictStr] = None, watch_providers : Optional[StrictStr] = None, **kwargs) -> GetDiscoverMovies200Response:  # noqa: E501
        """Discover movies  # noqa: E501

        Returns a list of movies in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_movies(page, language, genre, studio, keywords, sort_by, primary_release_date_gte, primary_release_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param genre:
        :type genre: str
        :param studio:
        :type studio: float
        :param keywords:
        :type keywords: str
        :param sort_by:
        :type sort_by: str
        :param primary_release_date_gte:
        :type primary_release_date_gte: str
        :param primary_release_date_lte:
        :type primary_release_date_lte: str
        :param with_runtime_gte:
        :type with_runtime_gte: float
        :param with_runtime_lte:
        :type with_runtime_lte: float
        :param vote_average_gte:
        :type vote_average_gte: float
        :param vote_average_lte:
        :type vote_average_lte: float
        :param vote_count_gte:
        :type vote_count_gte: float
        :param vote_count_lte:
        :type vote_count_lte: float
        :param watch_region:
        :type watch_region: str
        :param watch_providers:
        :type watch_providers: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDiscoverMovies200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_movies_with_http_info(page, language, genre, studio, keywords, sort_by, primary_release_date_gte, primary_release_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_movies_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, genre : Optional[StrictStr] = None, studio : Optional[Union[StrictFloat, StrictInt]] = None, keywords : Optional[StrictStr] = None, sort_by : Optional[StrictStr] = None, primary_release_date_gte : Optional[StrictStr] = None, primary_release_date_lte : Optional[StrictStr] = None, with_runtime_gte : Optional[Union[StrictFloat, StrictInt]] = None, with_runtime_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_lte : Optional[Union[StrictFloat, StrictInt]] = None, watch_region : Optional[StrictStr] = None, watch_providers : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Discover movies  # noqa: E501

        Returns a list of movies in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_movies_with_http_info(page, language, genre, studio, keywords, sort_by, primary_release_date_gte, primary_release_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param genre:
        :type genre: str
        :param studio:
        :type studio: float
        :param keywords:
        :type keywords: str
        :param sort_by:
        :type sort_by: str
        :param primary_release_date_gte:
        :type primary_release_date_gte: str
        :param primary_release_date_lte:
        :type primary_release_date_lte: str
        :param with_runtime_gte:
        :type with_runtime_gte: float
        :param with_runtime_lte:
        :type with_runtime_lte: float
        :param vote_average_gte:
        :type vote_average_gte: float
        :param vote_average_lte:
        :type vote_average_lte: float
        :param vote_count_gte:
        :type vote_count_gte: float
        :param vote_count_lte:
        :type vote_count_lte: float
        :param watch_region:
        :type watch_region: str
        :param watch_providers:
        :type watch_providers: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDiscoverMovies200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'language',
            'genre',
            'studio',
            'keywords',
            'sort_by',
            'primary_release_date_gte',
            'primary_release_date_lte',
            'with_runtime_gte',
            'with_runtime_lte',
            'vote_average_gte',
            'vote_average_lte',
            'vote_count_gte',
            'vote_count_lte',
            'watch_region',
            'watch_providers'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_movies" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))
        if _params.get('genre') is not None:  # noqa: E501
            _query_params.append(('genre', _params['genre']))
        if _params.get('studio') is not None:  # noqa: E501
            _query_params.append(('studio', _params['studio']))
        if _params.get('keywords') is not None:  # noqa: E501
            _query_params.append(('keywords', _params['keywords']))
        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sortBy', _params['sort_by']))
        if _params.get('primary_release_date_gte') is not None:  # noqa: E501
            _query_params.append(('primaryReleaseDateGte', _params['primary_release_date_gte']))
        if _params.get('primary_release_date_lte') is not None:  # noqa: E501
            _query_params.append(('primaryReleaseDateLte', _params['primary_release_date_lte']))
        if _params.get('with_runtime_gte') is not None:  # noqa: E501
            _query_params.append(('withRuntimeGte', _params['with_runtime_gte']))
        if _params.get('with_runtime_lte') is not None:  # noqa: E501
            _query_params.append(('withRuntimeLte', _params['with_runtime_lte']))
        if _params.get('vote_average_gte') is not None:  # noqa: E501
            _query_params.append(('voteAverageGte', _params['vote_average_gte']))
        if _params.get('vote_average_lte') is not None:  # noqa: E501
            _query_params.append(('voteAverageLte', _params['vote_average_lte']))
        if _params.get('vote_count_gte') is not None:  # noqa: E501
            _query_params.append(('voteCountGte', _params['vote_count_gte']))
        if _params.get('vote_count_lte') is not None:  # noqa: E501
            _query_params.append(('voteCountLte', _params['vote_count_lte']))
        if _params.get('watch_region') is not None:  # noqa: E501
            _query_params.append(('watchRegion', _params['watch_region']))
        if _params.get('watch_providers') is not None:  # noqa: E501
            _query_params.append(('watchProviders', _params['watch_providers']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetDiscoverMovies200Response",
        }

        return self.api_client.call_api(
            '/discover/movies', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_movies_genre_by_genre_id(self, genre_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> GetDiscoverMoviesGenreByGenreId200Response:  # noqa: E501
        """Discover movies by genre  # noqa: E501

        Returns a list of movies based on the provided genre ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_movies_genre_by_genre_id(genre_id, page, language, async_req=True)
        >>> result = thread.get()

        :param genre_id: (required)
        :type genre_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDiscoverMoviesGenreByGenreId200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_movies_genre_by_genre_id_with_http_info(genre_id, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_movies_genre_by_genre_id_with_http_info(self, genre_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Discover movies by genre  # noqa: E501

        Returns a list of movies based on the provided genre ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_movies_genre_by_genre_id_with_http_info(genre_id, page, language, async_req=True)
        >>> result = thread.get()

        :param genre_id: (required)
        :type genre_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDiscoverMoviesGenreByGenreId200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'genre_id',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_movies_genre_by_genre_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['genre_id']:
            _path_params['genreId'] = _params['genre_id']

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetDiscoverMoviesGenreByGenreId200Response",
        }

        return self.api_client.call_api(
            '/discover/movies/genre/{genreId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_movies_language_by_language(self, language : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language2 : Optional[StrictStr] = None, **kwargs) -> GetDiscoverMoviesLanguageByLanguage200Response:  # noqa: E501
        """Discover movies by original language  # noqa: E501

        Returns a list of movies based on the provided ISO 639-1 language code in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_movies_language_by_language(language, page, language2, async_req=True)
        >>> result = thread.get()

        :param language: (required)
        :type language: str
        :param page:
        :type page: float
        :param language2:
        :type language2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDiscoverMoviesLanguageByLanguage200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_movies_language_by_language_with_http_info(language, page, language2, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_movies_language_by_language_with_http_info(self, language : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language2 : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Discover movies by original language  # noqa: E501

        Returns a list of movies based on the provided ISO 639-1 language code in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_movies_language_by_language_with_http_info(language, page, language2, async_req=True)
        >>> result = thread.get()

        :param language: (required)
        :type language: str
        :param page:
        :type page: float
        :param language2:
        :type language2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDiscoverMoviesLanguageByLanguage200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'language',
            'page',
            'language2'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_movies_language_by_language" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['language']:
            _path_params['language'] = _params['language']

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language2') is not None:  # noqa: E501
            _query_params.append(('language', _params['language2']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetDiscoverMoviesLanguageByLanguage200Response",
        }

        return self.api_client.call_api(
            '/discover/movies/language/{language}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_movies_studio_by_studio_id(self, studio_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> GetDiscoverMoviesStudioByStudioId200Response:  # noqa: E501
        """Discover movies by studio  # noqa: E501

        Returns a list of movies based on the provided studio ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_movies_studio_by_studio_id(studio_id, page, language, async_req=True)
        >>> result = thread.get()

        :param studio_id: (required)
        :type studio_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDiscoverMoviesStudioByStudioId200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_movies_studio_by_studio_id_with_http_info(studio_id, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_movies_studio_by_studio_id_with_http_info(self, studio_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Discover movies by studio  # noqa: E501

        Returns a list of movies based on the provided studio ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_movies_studio_by_studio_id_with_http_info(studio_id, page, language, async_req=True)
        >>> result = thread.get()

        :param studio_id: (required)
        :type studio_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDiscoverMoviesStudioByStudioId200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'studio_id',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_movies_studio_by_studio_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['studio_id']:
            _path_params['studioId'] = _params['studio_id']

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetDiscoverMoviesStudioByStudioId200Response",
        }

        return self.api_client.call_api(
            '/discover/movies/studio/{studioId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_movies_upcoming(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> GetDiscoverMovies200Response:  # noqa: E501
        """Upcoming movies  # noqa: E501

        Returns a list of movies in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_movies_upcoming(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDiscoverMovies200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_movies_upcoming_with_http_info(page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_movies_upcoming_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Upcoming movies  # noqa: E501

        Returns a list of movies in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_movies_upcoming_with_http_info(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDiscoverMovies200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_movies_upcoming" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetDiscoverMovies200Response",
        }

        return self.api_client.call_api(
            '/discover/movies/upcoming', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_trending(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> GetSearch200Response:  # noqa: E501
        """Trending movies and TV  # noqa: E501

        Returns a list of movies and TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_trending(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetSearch200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_trending_with_http_info(page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_trending_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Trending movies and TV  # noqa: E501

        Returns a list of movies and TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_trending_with_http_info(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetSearch200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_trending" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetSearch200Response",
        }

        return self.api_client.call_api(
            '/discover/trending', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_tv(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, genre : Optional[StrictStr] = None, network : Optional[Union[StrictFloat, StrictInt]] = None, keywords : Optional[StrictStr] = None, sort_by : Optional[StrictStr] = None, first_air_date_gte : Optional[StrictStr] = None, first_air_date_lte : Optional[StrictStr] = None, with_runtime_gte : Optional[Union[StrictFloat, StrictInt]] = None, with_runtime_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_lte : Optional[Union[StrictFloat, StrictInt]] = None, watch_region : Optional[StrictStr] = None, watch_providers : Optional[StrictStr] = None, **kwargs) -> GetDiscoverTv200Response:  # noqa: E501
        """Discover TV shows  # noqa: E501

        Returns a list of TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_tv(page, language, genre, network, keywords, sort_by, first_air_date_gte, first_air_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param genre:
        :type genre: str
        :param network:
        :type network: float
        :param keywords:
        :type keywords: str
        :param sort_by:
        :type sort_by: str
        :param first_air_date_gte:
        :type first_air_date_gte: str
        :param first_air_date_lte:
        :type first_air_date_lte: str
        :param with_runtime_gte:
        :type with_runtime_gte: float
        :param with_runtime_lte:
        :type with_runtime_lte: float
        :param vote_average_gte:
        :type vote_average_gte: float
        :param vote_average_lte:
        :type vote_average_lte: float
        :param vote_count_gte:
        :type vote_count_gte: float
        :param vote_count_lte:
        :type vote_count_lte: float
        :param watch_region:
        :type watch_region: str
        :param watch_providers:
        :type watch_providers: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDiscoverTv200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_tv_with_http_info(page, language, genre, network, keywords, sort_by, first_air_date_gte, first_air_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_tv_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, genre : Optional[StrictStr] = None, network : Optional[Union[StrictFloat, StrictInt]] = None, keywords : Optional[StrictStr] = None, sort_by : Optional[StrictStr] = None, first_air_date_gte : Optional[StrictStr] = None, first_air_date_lte : Optional[StrictStr] = None, with_runtime_gte : Optional[Union[StrictFloat, StrictInt]] = None, with_runtime_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_lte : Optional[Union[StrictFloat, StrictInt]] = None, watch_region : Optional[StrictStr] = None, watch_providers : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Discover TV shows  # noqa: E501

        Returns a list of TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_tv_with_http_info(page, language, genre, network, keywords, sort_by, first_air_date_gte, first_air_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param genre:
        :type genre: str
        :param network:
        :type network: float
        :param keywords:
        :type keywords: str
        :param sort_by:
        :type sort_by: str
        :param first_air_date_gte:
        :type first_air_date_gte: str
        :param first_air_date_lte:
        :type first_air_date_lte: str
        :param with_runtime_gte:
        :type with_runtime_gte: float
        :param with_runtime_lte:
        :type with_runtime_lte: float
        :param vote_average_gte:
        :type vote_average_gte: float
        :param vote_average_lte:
        :type vote_average_lte: float
        :param vote_count_gte:
        :type vote_count_gte: float
        :param vote_count_lte:
        :type vote_count_lte: float
        :param watch_region:
        :type watch_region: str
        :param watch_providers:
        :type watch_providers: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDiscoverTv200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'language',
            'genre',
            'network',
            'keywords',
            'sort_by',
            'first_air_date_gte',
            'first_air_date_lte',
            'with_runtime_gte',
            'with_runtime_lte',
            'vote_average_gte',
            'vote_average_lte',
            'vote_count_gte',
            'vote_count_lte',
            'watch_region',
            'watch_providers'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_tv" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))
        if _params.get('genre') is not None:  # noqa: E501
            _query_params.append(('genre', _params['genre']))
        if _params.get('network') is not None:  # noqa: E501
            _query_params.append(('network', _params['network']))
        if _params.get('keywords') is not None:  # noqa: E501
            _query_params.append(('keywords', _params['keywords']))
        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sortBy', _params['sort_by']))
        if _params.get('first_air_date_gte') is not None:  # noqa: E501
            _query_params.append(('firstAirDateGte', _params['first_air_date_gte']))
        if _params.get('first_air_date_lte') is not None:  # noqa: E501
            _query_params.append(('firstAirDateLte', _params['first_air_date_lte']))
        if _params.get('with_runtime_gte') is not None:  # noqa: E501
            _query_params.append(('withRuntimeGte', _params['with_runtime_gte']))
        if _params.get('with_runtime_lte') is not None:  # noqa: E501
            _query_params.append(('withRuntimeLte', _params['with_runtime_lte']))
        if _params.get('vote_average_gte') is not None:  # noqa: E501
            _query_params.append(('voteAverageGte', _params['vote_average_gte']))
        if _params.get('vote_average_lte') is not None:  # noqa: E501
            _query_params.append(('voteAverageLte', _params['vote_average_lte']))
        if _params.get('vote_count_gte') is not None:  # noqa: E501
            _query_params.append(('voteCountGte', _params['vote_count_gte']))
        if _params.get('vote_count_lte') is not None:  # noqa: E501
            _query_params.append(('voteCountLte', _params['vote_count_lte']))
        if _params.get('watch_region') is not None:  # noqa: E501
            _query_params.append(('watchRegion', _params['watch_region']))
        if _params.get('watch_providers') is not None:  # noqa: E501
            _query_params.append(('watchProviders', _params['watch_providers']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetDiscoverTv200Response",
        }

        return self.api_client.call_api(
            '/discover/tv', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_tv_genre_by_genre_id(self, genre_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> GetDiscoverTvGenreByGenreId200Response:  # noqa: E501
        """Discover TV shows by genre  # noqa: E501

        Returns a list of TV shows based on the provided genre ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_tv_genre_by_genre_id(genre_id, page, language, async_req=True)
        >>> result = thread.get()

        :param genre_id: (required)
        :type genre_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDiscoverTvGenreByGenreId200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_tv_genre_by_genre_id_with_http_info(genre_id, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_tv_genre_by_genre_id_with_http_info(self, genre_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Discover TV shows by genre  # noqa: E501

        Returns a list of TV shows based on the provided genre ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_tv_genre_by_genre_id_with_http_info(genre_id, page, language, async_req=True)
        >>> result = thread.get()

        :param genre_id: (required)
        :type genre_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDiscoverTvGenreByGenreId200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'genre_id',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_tv_genre_by_genre_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['genre_id']:
            _path_params['genreId'] = _params['genre_id']

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetDiscoverTvGenreByGenreId200Response",
        }

        return self.api_client.call_api(
            '/discover/tv/genre/{genreId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_tv_language_by_language(self, language : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language2 : Optional[StrictStr] = None, **kwargs) -> GetDiscoverTvLanguageByLanguage200Response:  # noqa: E501
        """Discover TV shows by original language  # noqa: E501

        Returns a list of TV shows based on the provided ISO 639-1 language code in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_tv_language_by_language(language, page, language2, async_req=True)
        >>> result = thread.get()

        :param language: (required)
        :type language: str
        :param page:
        :type page: float
        :param language2:
        :type language2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDiscoverTvLanguageByLanguage200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_tv_language_by_language_with_http_info(language, page, language2, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_tv_language_by_language_with_http_info(self, language : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language2 : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Discover TV shows by original language  # noqa: E501

        Returns a list of TV shows based on the provided ISO 639-1 language code in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_tv_language_by_language_with_http_info(language, page, language2, async_req=True)
        >>> result = thread.get()

        :param language: (required)
        :type language: str
        :param page:
        :type page: float
        :param language2:
        :type language2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDiscoverTvLanguageByLanguage200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'language',
            'page',
            'language2'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_tv_language_by_language" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['language']:
            _path_params['language'] = _params['language']

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language2') is not None:  # noqa: E501
            _query_params.append(('language', _params['language2']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetDiscoverTvLanguageByLanguage200Response",
        }

        return self.api_client.call_api(
            '/discover/tv/language/{language}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_tv_network_by_network_id(self, network_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> GetDiscoverTvNetworkByNetworkId200Response:  # noqa: E501
        """Discover TV shows by network  # noqa: E501

        Returns a list of TV shows based on the provided network ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_tv_network_by_network_id(network_id, page, language, async_req=True)
        >>> result = thread.get()

        :param network_id: (required)
        :type network_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDiscoverTvNetworkByNetworkId200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_tv_network_by_network_id_with_http_info(network_id, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_tv_network_by_network_id_with_http_info(self, network_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Discover TV shows by network  # noqa: E501

        Returns a list of TV shows based on the provided network ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_tv_network_by_network_id_with_http_info(network_id, page, language, async_req=True)
        >>> result = thread.get()

        :param network_id: (required)
        :type network_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDiscoverTvNetworkByNetworkId200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'network_id',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_tv_network_by_network_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['network_id']:
            _path_params['networkId'] = _params['network_id']

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetDiscoverTvNetworkByNetworkId200Response",
        }

        return self.api_client.call_api(
            '/discover/tv/network/{networkId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_tv_upcoming(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> GetDiscoverTv200Response:  # noqa: E501
        """Discover Upcoming TV shows  # noqa: E501

        Returns a list of upcoming TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_tv_upcoming(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetDiscoverTv200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_tv_upcoming_with_http_info(page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_tv_upcoming_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Discover Upcoming TV shows  # noqa: E501

        Returns a list of upcoming TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_tv_upcoming_with_http_info(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetDiscoverTv200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_tv_upcoming" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetDiscoverTv200Response",
        }

        return self.api_client.call_api(
            '/discover/tv/upcoming', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_discover_watchlist(self, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs) -> GetUserWatchlist200Response:  # noqa: E501
        """Get the Plex watchlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_watchlist(page, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetUserWatchlist200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_discover_watchlist_with_http_info(page, **kwargs)  # noqa: E501

    @validate_arguments
    def get_discover_watchlist_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs):  # noqa: E501
        """Get the Plex watchlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_discover_watchlist_with_http_info(page, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetUserWatchlist200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discover_watchlist" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetUserWatchlist200Response",
        }

        return self.api_client.call_api(
            '/discover/watchlist', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_search(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> GetSearch200Response:  # noqa: E501
        """Search for movies, TV shows, or people  # noqa: E501

        Returns a list of movies, TV shows, or people a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_search(query, page, language, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetSearch200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_search_with_http_info(query, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def get_search_with_http_info(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Search for movies, TV shows, or people  # noqa: E501

        Returns a list of movies, TV shows, or people a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_search_with_http_info(query, page, language, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetSearch200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetSearch200Response",
        }

        return self.api_client.call_api(
            '/search', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_search_company(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs) -> GetSearchCompany200Response:  # noqa: E501
        """Search for companies  # noqa: E501

        Returns a list of TMDB companies matching the search query. (Will not return origin country)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_search_company(query, page, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetSearchCompany200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_search_company_with_http_info(query, page, **kwargs)  # noqa: E501

    @validate_arguments
    def get_search_company_with_http_info(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs):  # noqa: E501
        """Search for companies  # noqa: E501

        Returns a list of TMDB companies matching the search query. (Will not return origin country)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_search_company_with_http_info(query, page, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetSearchCompany200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_company" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetSearchCompany200Response",
        }

        return self.api_client.call_api(
            '/search/company', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_search_keyword(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs) -> GetSearchKeyword200Response:  # noqa: E501
        """Search for keywords  # noqa: E501

        Returns a list of TMDB keywords matching the search query  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_search_keyword(query, page, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetSearchKeyword200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_search_keyword_with_http_info(query, page, **kwargs)  # noqa: E501

    @validate_arguments
    def get_search_keyword_with_http_info(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs):  # noqa: E501
        """Search for keywords  # noqa: E501

        Returns a list of TMDB keywords matching the search query  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_search_keyword_with_http_info(query, page, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetSearchKeyword200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_keyword" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetSearchKeyword200Response",
        }

        return self.api_client.call_api(
            '/search/keyword', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_discover_genreslider_movie(self, language : Optional[StrictStr] = None, **kwargs) -> List[ListDiscoverGenresliderMovie200ResponseInner]:  # noqa: E501
        """Get genre slider data for movies  # noqa: E501

        Returns a list of genres with backdrops attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_discover_genreslider_movie(language, async_req=True)
        >>> result = thread.get()

        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ListDiscoverGenresliderMovie200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        return self.list_discover_genreslider_movie_with_http_info(language, **kwargs)  # noqa: E501

    @validate_arguments
    def list_discover_genreslider_movie_with_http_info(self, language : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Get genre slider data for movies  # noqa: E501

        Returns a list of genres with backdrops attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_discover_genreslider_movie_with_http_info(language, async_req=True)
        >>> result = thread.get()

        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ListDiscoverGenresliderMovie200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_discover_genreslider_movie" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[ListDiscoverGenresliderMovie200ResponseInner]",
        }

        return self.api_client.call_api(
            '/discover/genreslider/movie', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_discover_genreslider_tv(self, language : Optional[StrictStr] = None, **kwargs) -> List[ListDiscoverGenresliderMovie200ResponseInner]:  # noqa: E501
        """Get genre slider data for TV series  # noqa: E501

        Returns a list of genres with backdrops attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_discover_genreslider_tv(language, async_req=True)
        >>> result = thread.get()

        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ListDiscoverGenresliderMovie200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        return self.list_discover_genreslider_tv_with_http_info(language, **kwargs)  # noqa: E501

    @validate_arguments
    def list_discover_genreslider_tv_with_http_info(self, language : Optional[StrictStr] = None, **kwargs):  # noqa: E501
        """Get genre slider data for TV series  # noqa: E501

        Returns a list of genres with backdrops attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_discover_genreslider_tv_with_http_info(language, async_req=True)
        >>> result = thread.get()

        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ListDiscoverGenresliderMovie200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_discover_genreslider_tv" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[ListDiscoverGenresliderMovie200ResponseInner]",
        }

        return self.api_client.call_api(
            '/discover/genreslider/tv', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
