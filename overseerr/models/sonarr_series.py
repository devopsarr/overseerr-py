# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel
from overseerr.models.sonarr_series_add_options_inner import SonarrSeriesAddOptionsInner
from overseerr.models.sonarr_series_images_inner import SonarrSeriesImagesInner
from overseerr.models.sonarr_series_ratings_inner import SonarrSeriesRatingsInner
from overseerr.models.sonarr_series_seasons_inner import SonarrSeriesSeasonsInner

class SonarrSeries(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    title: Optional[str]
    sort_title: Optional[str]
    season_count: Optional[float]
    status: Optional[str]
    overview: Optional[str]
    network: Optional[str]
    air_time: Optional[str]
    images: Optional[List]
    remote_poster: Optional[str]
    seasons: Optional[List]
    year: Optional[float]
    path: Optional[str]
    profile_id: Optional[float]
    language_profile_id: Optional[float]
    season_folder: Optional[bool]
    monitored: Optional[bool]
    use_scene_numbering: Optional[bool]
    runtime: Optional[float]
    tvdb_id: Optional[float]
    tv_rage_id: Optional[float]
    tv_maze_id: Optional[float]
    first_aired: Optional[str]
    last_info_sync: Optional[str]
    series_type: Optional[str]
    clean_title: Optional[str]
    imdb_id: Optional[str]
    title_slug: Optional[str]
    certification: Optional[str]
    genres: Optional[List]
    tags: Optional[List]
    added: Optional[str]
    ratings: Optional[List]
    quality_profile_id: Optional[float]
    id: Optional[float]
    root_folder_path: Optional[str]
    add_options: Optional[List]
    additional_properties: Dict[str, Any] = {}
    __properties = ["title", "sortTitle", "seasonCount", "status", "overview", "network", "airTime", "images", "remotePoster", "seasons", "year", "path", "profileId", "languageProfileId", "seasonFolder", "monitored", "useSceneNumbering", "runtime", "tvdbId", "tvRageId", "tvMazeId", "firstAired", "lastInfoSync", "seriesType", "cleanTitle", "imdbId", "titleSlug", "certification", "genres", "tags", "added", "ratings", "qualityProfileId", "id", "rootFolderPath", "addOptions"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SonarrSeries:
        """Create an instance of SonarrSeries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seasons (list)
        _items = []
        if self.seasons:
            for _item in self.seasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['seasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ratings (list)
        _items = []
        if self.ratings:
            for _item in self.ratings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ratings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in add_options (list)
        _items = []
        if self.add_options:
            for _item in self.add_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addOptions'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if last_info_sync (nullable) is None
        if self.last_info_sync is None:
            _dict['lastInfoSync'] = None

        # set to None if id (nullable) is None
        if self.id is None:
            _dict['id'] = None

        # set to None if root_folder_path (nullable) is None
        if self.root_folder_path is None:
            _dict['rootFolderPath'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SonarrSeries:
        """Create an instance of SonarrSeries from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SonarrSeries.parse_obj(obj)

        _obj = SonarrSeries.parse_obj({
            "title": obj.get("title"),
            "sort_title": obj.get("sortTitle"),
            "season_count": obj.get("seasonCount"),
            "status": obj.get("status"),
            "overview": obj.get("overview"),
            "network": obj.get("network"),
            "air_time": obj.get("airTime"),
            "images": [SonarrSeriesImagesInner.from_dict(_item) for _item in obj.get("images")] if obj.get("images") is not None else None,
            "remote_poster": obj.get("remotePoster"),
            "seasons": [SonarrSeriesSeasonsInner.from_dict(_item) for _item in obj.get("seasons")] if obj.get("seasons") is not None else None,
            "year": obj.get("year"),
            "path": obj.get("path"),
            "profile_id": obj.get("profileId"),
            "language_profile_id": obj.get("languageProfileId"),
            "season_folder": obj.get("seasonFolder"),
            "monitored": obj.get("monitored"),
            "use_scene_numbering": obj.get("useSceneNumbering"),
            "runtime": obj.get("runtime"),
            "tvdb_id": obj.get("tvdbId"),
            "tv_rage_id": obj.get("tvRageId"),
            "tv_maze_id": obj.get("tvMazeId"),
            "first_aired": obj.get("firstAired"),
            "last_info_sync": obj.get("lastInfoSync"),
            "series_type": obj.get("seriesType"),
            "clean_title": obj.get("cleanTitle"),
            "imdb_id": obj.get("imdbId"),
            "title_slug": obj.get("titleSlug"),
            "certification": obj.get("certification"),
            "genres": obj.get("genres"),
            "tags": obj.get("tags"),
            "added": obj.get("added"),
            "ratings": [SonarrSeriesRatingsInner.from_dict(_item) for _item in obj.get("ratings")] if obj.get("ratings") is not None else None,
            "quality_profile_id": obj.get("qualityProfileId"),
            "id": obj.get("id"),
            "root_folder_path": obj.get("rootFolderPath"),
            "add_options": [SonarrSeriesAddOptionsInner.from_dict(_item) for _item in obj.get("addOptions")] if obj.get("addOptions") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

