# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional, Union
from pydantic import BaseModel
from overseerr.models.media_request_modified_by import MediaRequestModifiedBy
from overseerr.models.user import User

class MediaRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[float]
    status: Optional[float]
    media: Optional[MediaInfo]
    created_at: Optional[str]
    updated_at: Optional[str]
    requested_by: Optional[User]
    modified_by: Optional[MediaRequestModifiedBy]
    is4k: Optional[bool]
    server_id: Optional[float]
    profile_id: Optional[float]
    root_folder: Optional[str]
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "status", "media", "createdAt", "updatedAt", "requestedBy", "modifiedBy", "is4k", "serverId", "profileId", "rootFolder"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MediaRequest:
        """Create an instance of MediaRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "status",
                            "created_at",
                            "updated_at",
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of media
        if self.media:
            _dict['media'] = self.media.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_by
        if self.requested_by:
            _dict['requestedBy'] = self.requested_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified_by
        if self.modified_by:
            _dict['modifiedBy'] = self.modified_by.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MediaRequest:
        """Create an instance of MediaRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MediaRequest.parse_obj(obj)

        _obj = MediaRequest.parse_obj({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "media": MediaInfo.from_dict(obj.get("media")) if obj.get("media") is not None else None,
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "requested_by": User.from_dict(obj.get("requestedBy")) if obj.get("requestedBy") is not None else None,
            "modified_by": MediaRequestModifiedBy.from_dict(obj.get("modifiedBy")) if obj.get("modifiedBy") is not None else None,
            "is4k": obj.get("is4k"),
            "server_id": obj.get("serverId"),
            "profile_id": obj.get("profileId"),
            "root_folder": obj.get("rootFolder")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

