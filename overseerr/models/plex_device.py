# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel
from overseerr.models.plex_connection import PlexConnection

class PlexDevice(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    name: Optional[str]
    product: Optional[str]
    product_version: Optional[str]
    platform: Optional[str]
    platform_version: Optional[str]
    device: Optional[str]
    client_identifier: Optional[str]
    created_at: Optional[str]
    last_seen_at: Optional[str]
    provides: Optional[List]
    owned: Optional[bool]
    owner_id: Optional[str]
    home: Optional[bool]
    source_title: Optional[str]
    access_token: Optional[str]
    public_address: Optional[str]
    https_required: Optional[bool]
    synced: Optional[bool]
    relay: Optional[bool]
    dns_rebinding_protection: Optional[bool]
    nat_loopback_supported: Optional[bool]
    public_address_matches: Optional[bool]
    presence: Optional[bool]
    connection: Optional[List]
    additional_properties: Dict[str, Any] = {}
    __properties = ["name", "product", "productVersion", "platform", "platformVersion", "device", "clientIdentifier", "createdAt", "lastSeenAt", "provides", "owned", "ownerID", "home", "sourceTitle", "accessToken", "publicAddress", "httpsRequired", "synced", "relay", "dnsRebindingProtection", "natLoopbackSupported", "publicAddressMatches", "presence", "connection"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlexDevice:
        """Create an instance of PlexDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in connection (list)
        _items = []
        if self.connection:
            for _item in self.connection:
                if _item:
                    _items.append(_item.to_dict())
            _dict['connection'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlexDevice:
        """Create an instance of PlexDevice from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PlexDevice.parse_obj(obj)

        _obj = PlexDevice.parse_obj({
            "name": obj.get("name"),
            "product": obj.get("product"),
            "product_version": obj.get("productVersion"),
            "platform": obj.get("platform"),
            "platform_version": obj.get("platformVersion"),
            "device": obj.get("device"),
            "client_identifier": obj.get("clientIdentifier"),
            "created_at": obj.get("createdAt"),
            "last_seen_at": obj.get("lastSeenAt"),
            "provides": obj.get("provides"),
            "owned": obj.get("owned"),
            "owner_id": obj.get("ownerID"),
            "home": obj.get("home"),
            "source_title": obj.get("sourceTitle"),
            "access_token": obj.get("accessToken"),
            "public_address": obj.get("publicAddress"),
            "https_required": obj.get("httpsRequired"),
            "synced": obj.get("synced"),
            "relay": obj.get("relay"),
            "dns_rebinding_protection": obj.get("dnsRebindingProtection"),
            "nat_loopback_supported": obj.get("natLoopbackSupported"),
            "public_address_matches": obj.get("publicAddressMatches"),
            "presence": obj.get("presence"),
            "connection": [PlexConnection.from_dict(_item) for _item in obj.get("connection")] if obj.get("connection") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

