# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel
from overseerr.models.notification_agent_types import NotificationAgentTypes

class UserSettingsNotifications(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    notification_types: Optional[NotificationAgentTypes]
    email_enabled: Optional[bool]
    pgp_key: Optional[str]
    discord_enabled: Optional[bool]
    discord_enabled_types: Optional[float]
    discord_id: Optional[str]
    pushbullet_access_token: Optional[str]
    pushover_application_token: Optional[str]
    pushover_user_key: Optional[str]
    pushover_sound: Optional[str]
    telegram_enabled: Optional[bool]
    telegram_bot_username: Optional[str]
    telegram_chat_id: Optional[str]
    telegram_send_silently: Optional[bool]
    additional_properties: Dict[str, Any] = {}
    __properties = ["notificationTypes", "emailEnabled", "pgpKey", "discordEnabled", "discordEnabledTypes", "discordId", "pushbulletAccessToken", "pushoverApplicationToken", "pushoverUserKey", "pushoverSound", "telegramEnabled", "telegramBotUsername", "telegramChatId", "telegramSendSilently"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserSettingsNotifications:
        """Create an instance of UserSettingsNotifications from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of notification_types
        if self.notification_types:
            _dict['notificationTypes'] = self.notification_types.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if pgp_key (nullable) is None
        if self.pgp_key is None:
            _dict['pgpKey'] = None

        # set to None if discord_enabled_types (nullable) is None
        if self.discord_enabled_types is None:
            _dict['discordEnabledTypes'] = None

        # set to None if discord_id (nullable) is None
        if self.discord_id is None:
            _dict['discordId'] = None

        # set to None if pushbullet_access_token (nullable) is None
        if self.pushbullet_access_token is None:
            _dict['pushbulletAccessToken'] = None

        # set to None if pushover_application_token (nullable) is None
        if self.pushover_application_token is None:
            _dict['pushoverApplicationToken'] = None

        # set to None if pushover_user_key (nullable) is None
        if self.pushover_user_key is None:
            _dict['pushoverUserKey'] = None

        # set to None if pushover_sound (nullable) is None
        if self.pushover_sound is None:
            _dict['pushoverSound'] = None

        # set to None if telegram_bot_username (nullable) is None
        if self.telegram_bot_username is None:
            _dict['telegramBotUsername'] = None

        # set to None if telegram_chat_id (nullable) is None
        if self.telegram_chat_id is None:
            _dict['telegramChatId'] = None

        # set to None if telegram_send_silently (nullable) is None
        if self.telegram_send_silently is None:
            _dict['telegramSendSilently'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserSettingsNotifications:
        """Create an instance of UserSettingsNotifications from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UserSettingsNotifications.parse_obj(obj)

        _obj = UserSettingsNotifications.parse_obj({
            "notification_types": NotificationAgentTypes.from_dict(obj.get("notificationTypes")) if obj.get("notificationTypes") is not None else None,
            "email_enabled": obj.get("emailEnabled"),
            "pgp_key": obj.get("pgpKey"),
            "discord_enabled": obj.get("discordEnabled"),
            "discord_enabled_types": obj.get("discordEnabledTypes"),
            "discord_id": obj.get("discordId"),
            "pushbullet_access_token": obj.get("pushbulletAccessToken"),
            "pushover_application_token": obj.get("pushoverApplicationToken"),
            "pushover_user_key": obj.get("pushoverUserKey"),
            "pushover_sound": obj.get("pushoverSound"),
            "telegram_enabled": obj.get("telegramEnabled"),
            "telegram_bot_username": obj.get("telegramBotUsername"),
            "telegram_chat_id": obj.get("telegramChatId"),
            "telegram_send_silently": obj.get("telegramSendSilently")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

