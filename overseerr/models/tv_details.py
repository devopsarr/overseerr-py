# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel
from overseerr.models.episode import Episode
from overseerr.models.external_ids import ExternalIds
from overseerr.models.genre import Genre
from overseerr.models.keyword import Keyword
from overseerr.models.media_info import MediaInfo
from overseerr.models.movie_details_credits import MovieDetailsCredits
from overseerr.models.movie_details_production_countries_inner import MovieDetailsProductionCountriesInner
from overseerr.models.production_company import ProductionCompany
from overseerr.models.season import Season
from overseerr.models.spoken_language import SpokenLanguage
from overseerr.models.tv_details_content_ratings import TvDetailsContentRatings
from overseerr.models.tv_details_created_by_inner import TvDetailsCreatedByInner
from overseerr.models.watch_providers_inner import WatchProvidersInner

class TvDetails(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[float]
    backdrop_path: Optional[str]
    poster_path: Optional[str]
    content_ratings: Optional[TvDetailsContentRatings]
    created_by: Optional[List]
    episode_run_time: Optional[List]
    first_air_date: Optional[str]
    genres: Optional[List]
    homepage: Optional[str]
    in_production: Optional[bool]
    languages: Optional[List]
    last_air_date: Optional[str]
    last_episode_to_air: Optional[Episode]
    name: Optional[str]
    next_episode_to_air: Optional[Episode]
    networks: Optional[List]
    number_of_episodes: Optional[float]
    number_of_season: Optional[float]
    origin_country: Optional[List]
    original_language: Optional[str]
    original_name: Optional[str]
    overview: Optional[str]
    popularity: Optional[float]
    production_companies: Optional[List]
    production_countries: Optional[List]
    spoken_languages: Optional[List]
    seasons: Optional[List]
    status: Optional[str]
    tagline: Optional[str]
    type: Optional[str]
    vote_average: Optional[float]
    vote_count: Optional[float]
    credits: Optional[MovieDetailsCredits]
    external_ids: Optional[ExternalIds]
    keywords: Optional[List]
    media_info: Optional[MediaInfo]
    watch_providers: Optional[List]
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "backdropPath", "posterPath", "contentRatings", "createdBy", "episodeRunTime", "firstAirDate", "genres", "homepage", "inProduction", "languages", "lastAirDate", "lastEpisodeToAir", "name", "nextEpisodeToAir", "networks", "numberOfEpisodes", "numberOfSeason", "originCountry", "originalLanguage", "originalName", "overview", "popularity", "productionCompanies", "productionCountries", "spokenLanguages", "seasons", "status", "tagline", "type", "voteAverage", "voteCount", "credits", "externalIds", "keywords", "mediaInfo", "watchProviders"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TvDetails:
        """Create an instance of TvDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of content_ratings
        if self.content_ratings:
            _dict['contentRatings'] = self.content_ratings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in created_by (list)
        _items = []
        if self.created_by:
            for _item in self.created_by:
                if _item:
                    _items.append(_item.to_dict())
            _dict['createdBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in genres (list)
        _items = []
        if self.genres:
            for _item in self.genres:
                if _item:
                    _items.append(_item.to_dict())
            _dict['genres'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_episode_to_air
        if self.last_episode_to_air:
            _dict['lastEpisodeToAir'] = self.last_episode_to_air.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_episode_to_air
        if self.next_episode_to_air:
            _dict['nextEpisodeToAir'] = self.next_episode_to_air.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in networks (list)
        _items = []
        if self.networks:
            for _item in self.networks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['networks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in production_companies (list)
        _items = []
        if self.production_companies:
            for _item in self.production_companies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['productionCompanies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in production_countries (list)
        _items = []
        if self.production_countries:
            for _item in self.production_countries:
                if _item:
                    _items.append(_item.to_dict())
            _dict['productionCountries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spoken_languages (list)
        _items = []
        if self.spoken_languages:
            for _item in self.spoken_languages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['spokenLanguages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seasons (list)
        _items = []
        if self.seasons:
            for _item in self.seasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['seasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of credits
        if self.credits:
            _dict['credits'] = self.credits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_ids
        if self.external_ids:
            _dict['externalIds'] = self.external_ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in keywords (list)
        _items = []
        if self.keywords:
            for _item in self.keywords:
                if _item:
                    _items.append(_item.to_dict())
            _dict['keywords'] = _items
        # override the default output from pydantic by calling `to_dict()` of media_info
        if self.media_info:
            _dict['mediaInfo'] = self.media_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in watch_providers (list)
        _items = []
        if self.watch_providers:
            for _item in self.watch_providers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['watchProviders'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TvDetails:
        """Create an instance of TvDetails from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TvDetails.parse_obj(obj)

        _obj = TvDetails.parse_obj({
            "id": obj.get("id"),
            "backdrop_path": obj.get("backdropPath"),
            "poster_path": obj.get("posterPath"),
            "content_ratings": TvDetailsContentRatings.from_dict(obj.get("contentRatings")) if obj.get("contentRatings") is not None else None,
            "created_by": [TvDetailsCreatedByInner.from_dict(_item) for _item in obj.get("createdBy")] if obj.get("createdBy") is not None else None,
            "episode_run_time": obj.get("episodeRunTime"),
            "first_air_date": obj.get("firstAirDate"),
            "genres": [Genre.from_dict(_item) for _item in obj.get("genres")] if obj.get("genres") is not None else None,
            "homepage": obj.get("homepage"),
            "in_production": obj.get("inProduction"),
            "languages": obj.get("languages"),
            "last_air_date": obj.get("lastAirDate"),
            "last_episode_to_air": Episode.from_dict(obj.get("lastEpisodeToAir")) if obj.get("lastEpisodeToAir") is not None else None,
            "name": obj.get("name"),
            "next_episode_to_air": Episode.from_dict(obj.get("nextEpisodeToAir")) if obj.get("nextEpisodeToAir") is not None else None,
            "networks": [ProductionCompany.from_dict(_item) for _item in obj.get("networks")] if obj.get("networks") is not None else None,
            "number_of_episodes": obj.get("numberOfEpisodes"),
            "number_of_season": obj.get("numberOfSeason"),
            "origin_country": obj.get("originCountry"),
            "original_language": obj.get("originalLanguage"),
            "original_name": obj.get("originalName"),
            "overview": obj.get("overview"),
            "popularity": obj.get("popularity"),
            "production_companies": [ProductionCompany.from_dict(_item) for _item in obj.get("productionCompanies")] if obj.get("productionCompanies") is not None else None,
            "production_countries": [MovieDetailsProductionCountriesInner.from_dict(_item) for _item in obj.get("productionCountries")] if obj.get("productionCountries") is not None else None,
            "spoken_languages": [SpokenLanguage.from_dict(_item) for _item in obj.get("spokenLanguages")] if obj.get("spokenLanguages") is not None else None,
            "seasons": [Season.from_dict(_item) for _item in obj.get("seasons")] if obj.get("seasons") is not None else None,
            "status": obj.get("status"),
            "tagline": obj.get("tagline"),
            "type": obj.get("type"),
            "vote_average": obj.get("voteAverage"),
            "vote_count": obj.get("voteCount"),
            "credits": MovieDetailsCredits.from_dict(obj.get("credits")) if obj.get("credits") is not None else None,
            "external_ids": ExternalIds.from_dict(obj.get("externalIds")) if obj.get("externalIds") is not None else None,
            "keywords": [Keyword.from_dict(_item) for _item in obj.get("keywords")] if obj.get("keywords") is not None else None,
            "media_info": MediaInfo.from_dict(obj.get("mediaInfo")) if obj.get("mediaInfo") is not None else None,
            "watch_providers": [List[WatchProvidersInner].from_dict(_item) for _item in obj.get("watchProviders")] if obj.get("watchProviders") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

