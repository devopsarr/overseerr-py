# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel

class SonarrSeriesAddOptionsInner(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    ignore_episodes_with_files: Optional[bool]
    ignore_episodes_without_files: Optional[bool]
    search_for_missing_episodes: Optional[bool]
    additional_properties: Dict[str, Any] = {}
    __properties = ["ignoreEpisodesWithFiles", "ignoreEpisodesWithoutFiles", "searchForMissingEpisodes"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SonarrSeriesAddOptionsInner:
        """Create an instance of SonarrSeriesAddOptionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if ignore_episodes_with_files (nullable) is None
        if self.ignore_episodes_with_files is None:
            _dict['ignoreEpisodesWithFiles'] = None

        # set to None if ignore_episodes_without_files (nullable) is None
        if self.ignore_episodes_without_files is None:
            _dict['ignoreEpisodesWithoutFiles'] = None

        # set to None if search_for_missing_episodes (nullable) is None
        if self.search_for_missing_episodes is None:
            _dict['searchForMissingEpisodes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SonarrSeriesAddOptionsInner:
        """Create an instance of SonarrSeriesAddOptionsInner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SonarrSeriesAddOptionsInner.parse_obj(obj)

        _obj = SonarrSeriesAddOptionsInner.parse_obj({
            "ignore_episodes_with_files": obj.get("ignoreEpisodesWithFiles"),
            "ignore_episodes_without_files": obj.get("ignoreEpisodesWithoutFiles"),
            "search_for_missing_episodes": obj.get("searchForMissingEpisodes")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

